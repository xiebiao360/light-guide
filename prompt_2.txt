目前先只列出K8s环境的选项，具体的处理暂不实现
优先实现Docker容器环境，接下来是物理机环境
Agent 部署与连接
1. 应尽量支持远程触发安装，在创建环境时，要求用户填写凭证信息，并依据此信息尝试远程安装
2. 端到端通信可以优先使用websocket，至于如何穿透客户的网络（NAT/防火墙），请你给出方案
3. 请你提供Agent开放端口与不开放端口的不同方案，我可以进行选择
环境类型与探测
1. 用户在创建环境时就可以指定环境的类型
2. 对于 Kubernetes 环境，“环境”是指集群，Agent应该部署在节点（DaemonSet）上
应用管理
1. 创建应用时，其实只是定义应用，以及筛选条件，在不同环境中，如物理机中，通过从进程信息中通过程序名称和端口号过滤得出其运行状态等信息，而在docker容器环境中,从docker ps中过滤获得，不同环境中展示的列不同，如在docker容器环境中需要展示其容器ID，用于停止或移除容器
2. 仍然要使用应用模板或编排能力
3. 升级应用可能要去修改相应的dockercompose文件等，根据具体环境不同应具备不同的处理，具体实现待定
安装包管理
1. 安装包根据不同的环境有所不同，在物理环境中，是包含了二进制及其配置的压缩包，在容器环境中是镜像及配置文件的压缩包，k8s上可能是helm chat或者yaml文件
2. 安装包支持导入，也支持远程获取
3. 一键安装的原理，其实是由agent在不同环境中执行脚本，不过安装的进度需要在Client中展示
日志管理
1. 日志管理目前用来展示存储在磁盘上的日志文件信息，可以由用户自定义配置
2. 配置修改后应同步到Agent，具体如何同步的，请你给出方案供我选择
3. 全文检索的范围由用户配置的日志文件路径决定，如果是目录就是目录下所有文件，如果是具体文件，就是具体文件，如果具有通配符，需要根据通配符进行筛选
4. 全文检索应该在Agent端进行，传输到Client进行展示
配置管理
1. 只存储环境级别的配置，如工作目录等，应用级别的先不存，有需要再说
2. 对于像docker-compose.yml等部署配置文件，由Agent读取，在Client端展示并修改后，再由Agent覆盖到指定文件
安全与认证
1. Client和Agent能通信，就已达到初步要求
2. 身份凭证存储在Client端，如存放到sqlite中
3. 应具备用户角色和权限控制，管理员能删除环境，普通用户只能进行查看，无法进行操作
监控数据
1. 监控数据是 Agent 主动推送给 Client
2. 数据仅实时展示，不做存储
非功能需求
预期管理的环境数量级？几十个
对 Agent 资源消耗（CPU/内存/磁盘/网络）的限制或期望？暂无限制，但不应影响其他程序的运行
对 Client 连接 Agent 的网络延迟容忍度？尽量保证实时性
目标操作系统平台？都是linux